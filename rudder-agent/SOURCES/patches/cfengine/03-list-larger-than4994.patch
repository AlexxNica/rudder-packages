diff --git a/libpromises/cf3lex.l b/libpromises/cf3lex.l
index e23699b..5be87ca 100644
--- a/libpromises/cf3lex.l
+++ b/libpromises/cf3lex.l
@@ -91,14 +91,6 @@ assign     =>
 
 arrow      ->
 
-op         [(]
-
-cp         [)]
-
-ob         [{]
-
-cb         [}]
-
 /*
  * Three types of quoted strings:
  *
@@ -293,31 +285,6 @@ promise_type   [a-zA-Z_]+:
                           return NAKEDVAR;
                       }
 
-{op}                  {
-                          P.line_pos += yyleng;
-                          ParserDebug("\tL: %s %d\n", yytext, P.line_pos);
-                          return OP;
-                      }
-
-{cp}                  {
-                          P.line_pos += yyleng;
-                          ParserDebug("\tL: %s %d\n", yytext, P.line_pos);
-                          return CP;
-                      }
-
-{ob}                  {
-                          P.line_pos += yyleng;
-                          ParserDebug("\tL: %s %d\n", yytext, P.line_pos);
-                          return OB;
-                      }
-
-{cb}                  {
-                          P.line_pos += yyleng;
-                          ParserDebug("\tL: %s %d\n", yytext, P.line_pos);
-                          return CB;
-                      }
-
-
 {space}+              {
                           P.line_pos += yyleng;
                       }
diff --git a/libpromises/cf3parse.y b/libpromises/cf3parse.y
index 79954cf..8058e50 100644
--- a/libpromises/cf3parse.y
+++ b/libpromises/cf3parse.y
@@ -68,7 +68,6 @@ static size_t CURRENT_PROMISER_LINE = 0;
 %}
 
 %token IDSYNTAX BLOCKID QSTRING CLASS PROMISE_TYPE BUNDLE BODY ASSIGN ARROW NAKEDVAR
-%token OP CP OB CB
 %expect 1
 
 %%
@@ -219,12 +218,12 @@ arglist:               /* Empty */
                           ParseError("Error in bundle parameter list, expected ')', wrong input '%s'", yytext);
                        }
 
-arglist_begin:         OP
+arglist_begin:         '('
                        {
                            ParserDebug("P:%s:%s:%s arglist begin:%s\n", P.block,P.blocktype,P.blockid, yytext);
                        }
 
-arglist_end:           CP
+arglist_end:           ')'
                        {
                            ParserDebug("P:%s:%s:%s arglist end:%s\n", P.block,P.blocktype,P.blockid, yytext);
                        }
@@ -277,7 +276,7 @@ bundlebody:            body_begin
 
                        bundle_decl
 
-                       CB 
+                       '}'
                        {
                            INSTALL_SKIP = false;
                            P.offsets.last_id = -1;
@@ -292,7 +291,7 @@ bundlebody:            body_begin
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
-body_begin:            OB
+body_begin:            '{'
                        {
                            ParserDebug("P:%s:%s:%s begin body open\n", P.block,P.blocktype,P.blockid);
                        }
@@ -694,7 +693,7 @@ bodybody:              body_begin
 
                        bodyattribs
 
-                       CB 
+                       '}'
                        {
                            P.offsets.last_id = -1;
                            P.offsets.last_string = -1;
@@ -960,13 +959,15 @@ rval:                  IDSYNTAX
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
-list:                  OB litems CB
+list:                  '{' '}'
+                     | '{' litems '}'
+                     | '{' litems ',' '}'
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
-litems:                /* empty */
-                     | litem
-                     | litem ','  litems
+litems:
+                       litem
+                     | litems ',' litem
                      | litem error
                        {
                            ParserDebug("P:rval:list:error yychar = %d\n", yychar);
@@ -976,7 +977,9 @@ litems:                /* empty */
                            }
                            else if ( yychar == ASSIGN )
                            {
-                               ParseError("Check list statement  previous line, Expected '}', wrong input '%s'", yytext);
+                               ParseError("Check list statement previous line,"
+                                          " Expected '}', wrong input '%s'",
+                                          yytext);
                            }
                            else
                            {
@@ -988,15 +991,27 @@ litems:                /* empty */
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
 litem:                 IDSYNTAX
-                       { 
-                           ParserDebug("\tP:%s:%s:%s:%s list append; id = %s\n", P.block, P.blocktype, P.blockid, P.currentclasses ? P.currentclasses : "any", P.currentid);
-                           RlistAppendScalar((Rlist **)&P.currentRlist, P.currentid);
+                       {
+                           ParserDebug("\tP:%s:%s:%s:%s list append: "
+                                       "id = %s\n",
+                                       P.block, P.blocktype, P.blockid,
+                                       (P.currentclasses ?
+                                            P.currentclasses : "any"),
+                                       P.currentid);
+                           RlistAppendScalar((Rlist **) &P.currentRlist,
+                                             P.currentid);
                        }
 
                      | QSTRING
                        {
-                           ParserDebug("\tP:%s:%s:%s:%s list append: qstring = %s\n", P.block, P.blocktype, P.blockid, P.currentclasses ? P.currentclasses : "any", P.currentstring);
-                           RlistAppendScalar((Rlist **)&P.currentRlist,(void *)P.currentstring);
+                           ParserDebug("\tP:%s:%s:%s:%s list append: "
+                                       "qstring = %s\n",
+                                       P.block, P.blocktype, P.blockid,
+                                       (P.currentclasses ?
+                                            P.currentclasses : "any"),
+                                       P.currentstring);
+                           RlistAppendScalar((Rlist **) &P.currentRlist,
+                                             (void *) P.currentstring);
                            free(P.currentstring);
                            P.currentstring = NULL;
                        }
@@ -1052,7 +1067,7 @@ usefunction:           functionid givearglist
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
-givearglist:           OP 
+givearglist:           '('
                        {
                            if (++P.arg_nesting >= CF_MAX_NESTING)
                            {
@@ -1064,7 +1079,7 @@ givearglist:           OP
 
                        gaitems
 
-                       CP 
+                       ')'
                        {
                            ParserDebug("\tP:%s:%s:%s end givearglist for function %s, level %d\n", P.block,P.blocktype,P.blockid, P.currentfnid[P.arg_nesting], P.arg_nesting );
                            P.currentfncall[P.arg_nesting] = FnCallNew(P.currentfnid[P.arg_nesting], P.giveargs[P.arg_nesting]);
diff --git a/libpromises/loading.c b/libpromises/loading.c
index a0541f2..34e8b17 100644
--- a/libpromises/loading.c
+++ b/libpromises/loading.c
@@ -454,7 +454,8 @@ Policy *LoadPolicy(EvalContext *ctx, GenericAgentConfig *config)
 
     Banner("Loading policy");
 
-    Policy *policy = LoadPolicyFile(ctx, config, config->input_file, parsed_files_and_checksums, failed_files);
+    Policy *policy = LoadPolicyFile(ctx, config, config->input_file,
+                                    parsed_files_and_checksums, failed_files);
 
     if (StringSetSize(failed_files) > 0)
     {
@@ -470,10 +471,13 @@ Policy *LoadPolicy(EvalContext *ctx, GenericAgentConfig *config)
 
         if (PolicyCheckPartial(policy, errors))
         {
-            if (!config->bundlesequence && (PolicyIsRunnable(policy) || config->check_runnable))
+            if (!config->bundlesequence &&
+                (PolicyIsRunnable(policy) || config->check_runnable))
             {
-                Log(LOG_LEVEL_VERBOSE, "Running full policy integrity checks");
-                PolicyCheckRunnable(ctx, policy, errors, config->ignore_missing_bundles);
+                Log(LOG_LEVEL_VERBOSE,
+                    "Running full policy integrity checks");
+                PolicyCheckRunnable(ctx, policy, errors,
+                                    config->ignore_missing_bundles);
             }
         }
 
