From 55989299c0969500358169a218203f10c584aa06 Mon Sep 17 00:00:00 2001
From: Alexis Mousset <contact@amousset.me>
Date: Fri, 31 Mar 2017 14:06:57 +0200
Subject: [PATCH] CFE-2524: Avoid copying variable table when expanding a
 promise

The idea is to stop copying variable tables, which appears to be
one of the most heavy operation the agent does, but to always
lookup the variables in the global table.

The main issue with this change is to manage ambiguities
in the use of the "this" scope. It is used both for special
variables at promise level and as an alias for variables in the
current bundle.

The general idea is to modify VariableResolve to try to resolve
unknown "this"-scoped variables as variables in the current bundle.

The is a second change to force "this"-scopes variables
passed as parameters to a bundle to be qualified explicitly in
the calling bundle.

A non-compatible change could be to stop supporting "this" scope
for non-special bundle, which would allow a clean separation
and avoid the workarounds.

Changelog: Title
---
 libpromises/eval_context.c                         | 65 ++++++++---------
 libpromises/expand.c                               |  3 +-
 libpromises/var_expressions.c                      | 33 +++++++++
 libpromises/var_expressions.h                      |  2 +
 libpromises/variable.c                             | 20 ------
 .../acceptance/01_vars/01_basic/this_variables.cf  | 83 ++++++++++++++++++++++
 .../02_functions/nth_datacontainer.cf.expected     | 14 ++--
 7 files changed, 157 insertions(+), 63 deletions(-)
 create mode 100644 tests/acceptance/01_vars/01_basic/this_variables.cf

diff --git a/libpromises/eval_context.c b/libpromises/eval_context.c
index f967026..6c305b1 100644
--- a/libpromises/eval_context.c
+++ b/libpromises/eval_context.c
@@ -1334,16 +1334,8 @@ void EvalContextStackPushPromiseFrame(EvalContext *ctx, const Promise *owner, bo
 
     EvalContextStackPushFrame(ctx, frame);
 
-    if (copy_bundle_context)
-    {
-        frame->data.promise.vars = VariableTableCopyLocalized(ctx->global_variables,
-                                                              EvalContextStackCurrentBundle(ctx)->ns,
-                                                              EvalContextStackCurrentBundle(ctx)->name);
-    }
-    else
-    {
-        frame->data.promise.vars = VariableTableNew();
-    }
+    // Ignore copy_bundle_context and create an empty table
+    frame->data.promise.vars = VariableTableNew();
 
     if (PromiseGetBundle(owner)->source_path)
     {
@@ -1915,6 +1907,8 @@ static VariableTable *GetVariableTableForScope(const EvalContext *ctx,
             return frame ? frame->data.body.vars : NULL;
         }
 
+    // "this" variables can be in local or global variable table (when this is used for non-special
+    // varables), so return local as VariableResolve will try global table anyway.
     case SPECIAL_SCOPE_THIS:
         {
             StackFrame *frame = LastStackFrameByType(ctx, STACK_FRAME_TYPE_PROMISE);
@@ -2005,6 +1999,7 @@ static void VarRefStackQualify(const EvalContext *ctx, VarRef *ref)
 
     case STACK_FRAME_TYPE_PROMISE:
     case STACK_FRAME_TYPE_PROMISE_ITERATION:
+        // This is necessary to allow special "this" variable to work when used without "this".
         VarRefQualify(ref, NULL, SpecialScopeToString(SPECIAL_SCOPE_THIS));
         break;
     }
@@ -2054,9 +2049,6 @@ bool EvalContextVariablePut(EvalContext *ctx,
  * means that an unqualified reference will be looked up in the context of the top
  * stack frame. Note that when evaluating a promise, this will qualify a reference
  * to the 'this' scope.
- *
- * Ideally, this function should resolve a variable by walking down the stack, but
- * this is pending rework in variable iteration.
  */
 static Variable *VariableResolve(const EvalContext *ctx, const VarRef *ref)
 {
@@ -2065,16 +2057,29 @@ static Variable *VariableResolve(const EvalContext *ctx, const VarRef *ref)
     if (!VarRefIsQualified(ref))
     {
         VarRef *qref = VarRefCopy(ref);
+        // Warning: This will "qualify" non-scoped variables in a promise to this.variable
         VarRefStackQualify(ctx, qref);
         Variable *ret = VariableResolve(ctx, qref);
         VarRefDestroy(qref);
         return ret;
     }
 
+    /*
+     * We will make a first lookup that works in almost all cases: will look for local
+     * or global variables, depending of the current scope.
+     *
+     * The only case it does not work is when we have a "this.custom_variable" variable
+     * because we will search is local promise scope the variable is in the global
+     * variable table. In this case, we will look for the variable in the current bundle.
+     */
+
+    // Get the variable table associated to the scope
     VariableTable *table = GetVariableTableForScope(ctx, ref->ns, ref->scope);
+
+    Variable *var;
     if (table)
     {
-        Variable *var = VariableTableGet(table, ref);
+        var = VariableTableGet(table, ref);
         if (var)
         {
             return var;
@@ -2092,6 +2097,17 @@ static Variable *VariableResolve(const EvalContext *ctx, const VarRef *ref)
         }
     }
 
+    // Try to qualify "this." variable to "current_bundle."
+    const Bundle *last_bundle = EvalContextStackCurrentBundle(ctx);
+    if (last_bundle && strcmp(ref->scope, SpecialScopeToString(SPECIAL_SCOPE_THIS)) == 0)
+    {
+        VarRef *qref = VarRefCopy(ref);
+        VarRefQualify(qref, last_bundle->ns, last_bundle->name);
+        var = VariableResolve(ctx, qref);
+        VarRefDestroy(qref);
+        return var;
+    }
+
     return NULL;
 }
 
@@ -2130,27 +2146,6 @@ const void *EvalContextVariableGet(const EvalContext *ctx, const VarRef *ref, Da
             return var->rval.item;
         }
     }
-    else if (!VarRefIsQualified(ref))
-    {
-        /*
-         * FALLBACK: Because VariableResolve currently does not walk the stack
-         * (rather, it looks at only the top frame), we do an explicit retry
-         * here to qualify an unqualified reference to the current bundle.
-         *
-         * This is overly complicated, and will go away as soon as
-         * VariableResolve can walk the stack (which is pending rework in
-         * variable iteration).
-         */
-        const Bundle *bp = EvalContextStackCurrentBundle(ctx);
-        if (bp)
-        {
-            VarRef *qref = VarRefCopy(ref);
-            VarRefQualify(qref, bp->ns, bp->name);
-            const void *ret = EvalContextVariableGet(ctx, qref, type_out);
-            VarRefDestroy(qref);
-            return ret;
-        }
-    }
 
     if (type_out)
     {
diff --git a/libpromises/expand.c b/libpromises/expand.c
index dc90fac..fa8a3a4 100644
--- a/libpromises/expand.c
+++ b/libpromises/expand.c
@@ -256,7 +256,8 @@ PromiseResult ExpandPromise(EvalContext *ctx, const Promise *pp,
      *    (including body inheritance). */
     Promise *pcopy = DeRefCopyPromise(ctx, pp);
 
-    EvalContextStackPushPromiseFrame(ctx, pcopy, true);
+    // TODO: Remove last parameter?
+    EvalContextStackPushPromiseFrame(ctx, pcopy, false);
     PromiseIterator *iterctx = PromiseIteratorNew(pcopy);
 
     /* 2. Parse all strings (promiser-promisee-constraints), find all
diff --git a/libpromises/var_expressions.c b/libpromises/var_expressions.c
index afede51..258d58c 100644
--- a/libpromises/var_expressions.c
+++ b/libpromises/var_expressions.c
@@ -320,6 +320,16 @@ VarRef *VarRefParseFromNamespaceAndScope(const char *qualified_name,
         {
             _ns = NULL;
         }
+
+        /*
+         * Force considering non-special "this." variables as unqualified.
+         * This allows qualifying bundle parameters passed as reference with a "this" scope
+         * in the calling bundle.
+         */
+        if (is_this_not_special(scope, lval)) {
+            free(scope);
+            scope = NULL;
+        }
     }
 
     VarRef *ref = xmalloc(sizeof(VarRef));
@@ -333,6 +343,29 @@ VarRef *VarRefParseFromNamespaceAndScope(const char *qualified_name,
     return ref;
 }
 
+/*
+ * This function will return true if the given variable is
+ * a this.something variable that is an alias to a non-special local variable.
+ */
+bool is_this_not_special(const char *scope, const char *lval) {
+    // TODO: better way to get this list?
+    const char *special_this_variables[] = {"v","k","this","service_policy","promiser","promiser_uid","promiser_gid","promiser_pid","promiser_ppid","bundle","handle","namespace","promise_filename","promise_dirname","promise_linenumber", NULL};
+
+    if (!scope) {
+        return false;
+    }
+
+    if (SpecialScopeFromString(scope) != SPECIAL_SCOPE_THIS) {
+        return false;
+    }
+
+    if (IsStrIn(lval, special_this_variables)) {
+        return false;
+    }
+
+    return true;
+}
+
 VarRef *VarRefParse(const char *var_ref_string)
 {
     return VarRefParseFromNamespaceAndScope(var_ref_string, NULL, NULL, CF_NS, '.');
diff --git a/libpromises/var_expressions.h b/libpromises/var_expressions.h
index 3639a8f..28f77bb 100644
--- a/libpromises/var_expressions.h
+++ b/libpromises/var_expressions.h
@@ -57,6 +57,8 @@ VarRef *VarRefCopy(const VarRef *ref);
 VarRef *VarRefCopyLocalized(const VarRef *ref);
 VarRef *VarRefCopyIndexless(const VarRef *ref);
 
+bool is_this_not_special(const char *scope, const char *lval);
+
 VarRef *VarRefParse(const char *var_ref_string);
 
 VarRef *VarRefParseFromBundle(const char *var_ref_string, const Bundle *bundle);
diff --git a/libpromises/variable.c b/libpromises/variable.c
index bde3994..ebc6e8a 100644
--- a/libpromises/variable.c
+++ b/libpromises/variable.c
@@ -341,23 +341,3 @@ void VariableTableIteratorDestroy(VariableTableIterator *iter)
         free(iter);
     }
 }
-
-VariableTable *VariableTableCopyLocalized(const VariableTable *table, const char *ns, const char *scope)
-{
-    VariableTable *localized_copy = VariableTableNew();
-
-    VariableTableIterator *iter = VariableTableIteratorNew(table, ns, scope, NULL);
-    Variable *foreign_var = NULL;
-    while ((foreign_var = VariableTableIteratorNext(iter)))
-    {
-        /* TODO why is tags NULL here? Shouldn't it be an exact copy of
-         * foreign_var->tags? */
-        Variable *localized_var = VariableNew(VarRefCopyLocalized(foreign_var->ref),
-                                              RvalCopy(foreign_var->rval), foreign_var->type,
-                                              NULL, foreign_var->promise);
-        VarMapInsert(localized_copy->vars, localized_var->ref, localized_var);
-    }
-    VariableTableIteratorDestroy(iter);
-
-    return localized_copy;
-}
diff --git a/tests/acceptance/01_vars/01_basic/this_variables.cf b/tests/acceptance/01_vars/01_basic/this_variables.cf
new file mode 100644
index 0000000..638d840
--- /dev/null
+++ b/tests/acceptance/01_vars/01_basic/this_variables.cf
@@ -0,0 +1,83 @@
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+bundle agent test
+{
+  vars:
+    "var"      slist => { "var in test" };
+    "var_test" slist => { "var_test in test" };
+
+  methods: 
+    "any" usebundle => inter;
+}
+
+bundle agent inter
+{
+  vars:
+    "var" slist => { "var in inter" };
+    "k" slist => { "k in inter" };
+
+  methods:
+    "any1" usebundle => final("test1", @(this.var_test));
+    "any2" usebundle => final("test2", @(var_test));
+    "any3" usebundle => final("test3", @(this.var));
+    "any4" usebundle => final("test4", @(var));
+    "any5" usebundle => final("test5", @(this.k));
+    "any6" usebundle => final("test6", @(k));
+    "any7" usebundle => final("test7", @(this.bundle));
+    "any8" usebundle => final("test8", @(bundle));
+}
+
+bundle agent final(name, param)
+{
+  vars:
+    "${name}" string => "${param}";
+}
+
+bundle agent check
+{
+
+  classes:
+
+    "ok1" not => strcmp("var_test in test", "${final.test1}");
+    "ok2" not => strcmp("var_test in test", "${final.test2}");
+    "ok3" expression => strcmp("var in inter", "${final.test3}");
+    "ok4" expression => strcmp("var in inter", "${final.test4}");
+    "ok5" not => strcmp("k in inter", "${final.test5}");
+    "ok6" expression => strcmp("k in inter", "${final.test6}");
+    "ok7" not => strcmp("inter", "${final.test7}");
+    "ok8" not => strcmp("inter", "${final.test8}");
+
+    "ok" expression => "ok1.ok2.ok3.ok4.ok5.ok6.ok7.ok8";    
+
+  reports:
+
+    ok::
+      "$(this.promise_filename) Pass";
+
+    !ok::
+      "FAIL";
+
+    !ok1::
+      "variable '${final.test1}' = 'var_test in test'";
+    !ok2::
+      "variable '${final.test2}' = 'var_test in test'";
+    !ok3::
+      "variable '${final.test3}' != 'var in inter'";
+    !ok4::
+      "variable '${final.test4}' != 'var in inter'";
+    !ok5::
+      "variable '${final.test5}' = 'k in inter'";
+    !ok6::
+      "variable '${final.test6}' != 'k in inter'";
+    !ok7::
+      "variable '${final.test7}' = 'inter'";
+    !ok8::
+      "variable '${final.test8}' = 'inter'";
+}
+
+
diff --git a/tests/acceptance/01_vars/02_functions/nth_datacontainer.cf.expected b/tests/acceptance/01_vars/02_functions/nth_datacontainer.cf.expected
index fc702b7..9375b9d 100644
--- a/tests/acceptance/01_vars/02_functions/nth_datacontainer.cf.expected
+++ b/tests/acceptance/01_vars/02_functions/nth_datacontainer.cf.expected
@@ -1,20 +1,20 @@
 jsonstring = {"boolean":true,"boolean_2":false,"integer":20130111,"integer_2":987654321,"list":["chris","dituri","was","here"],"null":null,"object":{"a":true,"b":[1,2,3],"c":"cat","d":108},"string":"Figaro. Figaro. Figaro, Figaro, Figaro... Figaro!","string_2":"Othello? Where art thou now?"}
 keys:json = boolean
-keys:json = string
+keys:json = boolean_2
 keys:json = integer
+keys:json = integer_2
 keys:json = list
+keys:json = null
 keys:json = object
-keys:json = integer_2
+keys:json = string
 keys:json = string_2
-keys:json = boolean_2
-keys:json = null
 primitive:json[boolean] = true
-primitive:json[string] = Figaro. Figaro. Figaro, Figaro, Figaro... Figaro!
+primitive:json[boolean_2] = false
 primitive:json[integer] = 20130111
 primitive:json[integer_2] = 987654321
-primitive:json[string_2] = Othello? Where art thou now?
-primitive:json[boolean_2] = false
 primitive:json[null] = null
+primitive:json[string] = Figaro. Figaro. Figaro, Figaro, Figaro... Figaro!
+primitive:json[string_2] = Othello? Where art thou now?
 list:json[0] = chris
 list:json[1] = dituri
 list:json[2] = was
