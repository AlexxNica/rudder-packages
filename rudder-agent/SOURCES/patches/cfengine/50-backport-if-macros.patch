From 93ac206f9c4e5b5a43b0d6f70497c409d32ff002 Mon Sep 17 00:00:00 2001
From: Ted Zlatanov <tzz@lifelogs.com>
Date: Sat, 24 Aug 2013 10:59:08 -0400
Subject: [PATCH] Redmine#7111: @if macro

---
 libpromises/cf3lex.l                               | 94 ++++++++++++++++++++++
 libpromises/parser_state.h                         |  2 +
 tests/acceptance/00_basics/macros/if.cf            | 48 +++++++++++
 .../00_basics/macros/if_eof_without_endif.x.cf     | 24 ++++++
 .../00_basics/macros/if_eof_without_endif2.x.cf    | 24 ++++++
 .../acceptance/00_basics/macros/if_mismatched.x.cf | 50 ++++++++++++
 .../00_basics/macros/if_multiple_endif.x.cf        | 44 ++++++++++
 tests/acceptance/00_basics/macros/if_nested.x.cf   | 45 +++++++++++
 8 files changed, 331 insertions(+)
 create mode 100644 tests/acceptance/00_basics/macros/if.cf
 create mode 100644 tests/acceptance/00_basics/macros/if_eof_without_endif.x.cf
 create mode 100644 tests/acceptance/00_basics/macros/if_eof_without_endif2.x.cf
 create mode 100644 tests/acceptance/00_basics/macros/if_mismatched.x.cf
 create mode 100644 tests/acceptance/00_basics/macros/if_multiple_endif.x.cf
 create mode 100644 tests/acceptance/00_basics/macros/if_nested.x.cf

diff --git a/libpromises/cf3lex.l b/libpromises/cf3lex.l
index 5be87ca..9140fcc 100644
--- a/libpromises/cf3lex.l
+++ b/libpromises/cf3lex.l
@@ -69,6 +69,8 @@ P.offsets.current += yyleng;
 
 %}
 
+%x if_ignore_state
+
 space      [ \t]+
 
 newline    ([\n]|[\xd][\xa])
@@ -77,6 +79,9 @@ line       ^.*$
 
 comment    #[^\n]*
 
+macro_if    ^@if\ version_after\([0-9]{1,10}\.[0-9]{1,10}\)
+macro_endif ^@endif
+
 promises   bundle
 
 body       body
@@ -133,6 +138,80 @@ promise_type   [a-zA-Z_]+:
                           P.line_pos = 0;
                       }
 
+{macro_if}            {
+                        const char* version_text = yytext+18;
+                        ParserDebug("\tL:macro @if %d:version=%s\n", P.line_pos, version_text);
+                        {
+                          int request_major = 0;
+                          int request_minor = 0;
+                          int major = 0;
+                          int minor = 0;
+                          int patch = 0;
+
+                          if (P.if_depth > 0)
+                          {
+                            yyerror("fatal: nested @if macros are not allowed");
+                            return 0;
+                          }
+
+                          P.if_depth++;
+
+                          if (3 == sscanf(Version(), "%d.%d.%d", &major, &minor, &patch))
+                          {
+                            if (2 == sscanf(version_text, "%d.%d", &request_major, &request_minor))
+                            {
+                            if ((request_major > major) ||
+                                (request_major == major && request_minor > minor))
+                              {
+                                /* ignore to the next @endif */
+                                ParserDebug("\tL:macro @if %d:ignoring to next @endif or EOF\n", P.line_pos);
+                                BEGIN(if_ignore_state);
+                              }
+                              else /* we're OK with the version */
+                              {
+                                ParserDebug("\tL:macro @if %d:accepted to next @endif\n", P.line_pos);
+                              }
+                            }
+                            else
+                            {
+                              yyerror("fatal: macro @if requested an unparseable version");
+                              return 0;
+                            }
+                          }
+                          else
+                          {
+                            yyerror("fatal: Version() was unparseable");
+                            return 0;
+                          }
+                        }
+                      }
+
+{macro_endif}         {
+                        ParserDebug("\tL:macro @endif %d\n", P.line_pos);
+                        BEGIN(INITIAL);
+                        if (P.if_depth <= 0)
+                        {
+                          yyerror("fatal: @endif macros without a matching @if are not allowed");
+                          return 0;
+                        }
+                        P.if_depth--;
+                      }
+
+<if_ignore_state>{macro_endif} {
+                                 ParserDebug("\tL:macro @endif %d\n", P.line_pos);
+                                 BEGIN(INITIAL);
+                                 if (P.if_depth <= 0)
+                                 {
+                                   yyerror("fatal: @endif macros without a matching @if are not allowed");
+                                   return 0;
+                                 }
+                                 P.if_depth--;
+                               }
+
+<if_ignore_state>.*          {
+                               ParserDebug("\tL:inside macro @if, ignoring text:%s\n", yytext);
+                             }
+
 {promises}            {
                           /* Note this has to come before "id" since it is a subset of id */
 
@@ -298,6 +377,21 @@ promise_type   [a-zA-Z_]+:
                           return yytext[0];
                       }
 
+<if_ignore_state><<EOF>>     {
+                               if (P.if_depth > 0)
+                               {
+                                 yyerror("EOF seen while @if was waiting for @endif");
+                                 return 0;
+                               }
+                             }
+
+<<EOF>>     {
+              if (P.if_depth > 0)
+              {
+                yyerror("EOF seen while @if was waiting for @endif");
+              }
+              return 0; // loops forever without this
+            }
 
 %%
 
diff --git a/libpromises/parser_state.h b/libpromises/parser_state.h
index 5f68e82..464f4b1 100644
--- a/libpromises/parser_state.h
+++ b/libpromises/parser_state.h
@@ -49,6 +49,8 @@ typedef struct
     int warnings; // bitfield of warnings not considered to be an error
     int warnings_error; // bitfield of warnings considered to be an error
 
+    int if_depth;
+
     int arg_nesting;
     int list_nesting;
 
diff --git a/tests/acceptance/00_basics/macros/if.cf b/tests/acceptance/00_basics/macros/if.cf
new file mode 100644
index 0000000..ee690bb
--- /dev/null
+++ b/tests/acceptance/00_basics/macros/if.cf
@@ -0,0 +1,48 @@
+######################################################
+#
+#  Test that @if works
+#
+#####################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+bundle common test
+{
+@if version_after(3.6)
+  classes:
+      "expected" expression => "any";
+@endif
+
+@if version_after(3.5)
+  classes:
+      "expected2" expression => "any";
+@endif
+
+@if version_after(2.100)
+  classes:
+      "expected_2_100" expression => "any";
+@endif
+
+@if version_after(300.700)
+  classes:
+      "not_expected" expression => "any";
+@endif
+}
+
+bundle agent check
+{
+  methods:
+      "" usebundle => dcs_passif_expected("expected,expected2,expected_2_100",
+                                         "not_expected",
+                                         $(this.promise_filename));
+}
+
+@if version_after(300.600)
+
+This text should never be seen, it's completely ignored
+@endif
diff --git a/tests/acceptance/00_basics/macros/if_eof_without_endif.x.cf b/tests/acceptance/00_basics/macros/if_eof_without_endif.x.cf
new file mode 100644
index 0000000..6622bcc
--- /dev/null
+++ b/tests/acceptance/00_basics/macros/if_eof_without_endif.x.cf
@@ -0,0 +1,24 @@
+######################################################
+#
+#  Test that @if works
+#
+#####################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+bundle agent check
+{
+  methods:
+      "" usebundle => dcs_passif_expected("any",
+                                         "",
+                                         $(this.promise_filename));
+}
+
+@if version_after(300.100)
+
+This text should never be seen, it's completely ignored
diff --git a/tests/acceptance/00_basics/macros/if_eof_without_endif2.x.cf b/tests/acceptance/00_basics/macros/if_eof_without_endif2.x.cf
new file mode 100644
index 0000000..2d7f369
--- /dev/null
+++ b/tests/acceptance/00_basics/macros/if_eof_without_endif2.x.cf
@@ -0,0 +1,24 @@
+######################################################
+#
+#  Test that @if works
+#
+#####################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+bundle agent check
+{
+  methods:
+      "" usebundle => dcs_passif_expected("any",
+                                         "",
+                                         $(this.promise_filename));
+}
+
+@if version_after(1.1)
+
+# just testing for EOF
diff --git a/tests/acceptance/00_basics/macros/if_mismatched.x.cf b/tests/acceptance/00_basics/macros/if_mismatched.x.cf
new file mode 100644
index 0000000..5a552b6
--- /dev/null
+++ b/tests/acceptance/00_basics/macros/if_mismatched.x.cf
@@ -0,0 +1,50 @@
+######################################################
+#
+#  Test that @if works
+#
+#####################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+bundle common test
+{
+@if version_after(3.7)
+@if version_after(3.6)
+  classes:
+      "expected" expression => "any";
+@endif
+@endif
+@endif
+@endif
+@endif
+
+@if version_after(3.6)
+  classes:
+      "expected2" expression => "any";
+@endif
+
+@if version_after(300.700)
+@if version_after(3.6)
+  classes:
+      "not_expected" expression => "any";
+@endif
+@endif
+}
+
+bundle agent check
+{
+  methods:
+      "" usebundle => dcs_passif_expected("expected,expected2",
+                                         "not_expected",
+                                         $(this.promise_filename));
+}
+
+@if version_after(300.600)
+
+This text should never be seen, it's completely ignored
+@endif
diff --git a/tests/acceptance/00_basics/macros/if_multiple_endif.x.cf b/tests/acceptance/00_basics/macros/if_multiple_endif.x.cf
new file mode 100644
index 0000000..1d8c4d1
--- /dev/null
+++ b/tests/acceptance/00_basics/macros/if_multiple_endif.x.cf
@@ -0,0 +1,44 @@
+######################################################
+#
+#  Test that @if works
+#
+#####################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+bundle common test
+{
+@if version_after(3.7)
+  classes:
+      "expected" expression => "any";
+@endif
+@endif
+
+@if version_after(3.6)
+  classes:
+      "expected2" expression => "any";
+@endif
+
+@if version_after(300.700)
+  classes:
+      "not_expected" expression => "any";
+@endif
+}
+
+bundle agent check
+{
+  methods:
+      "" usebundle => dcs_passif_expected("expected,expected2",
+                                         "not_expected",
+                                         $(this.promise_filename));
+}
+
+@if version_after(300.600)
+
+This text should never be seen, it's completely ignored
+@endif
diff --git a/tests/acceptance/00_basics/macros/if_nested.x.cf b/tests/acceptance/00_basics/macros/if_nested.x.cf
new file mode 100644
index 0000000..55d9ecf
--- /dev/null
+++ b/tests/acceptance/00_basics/macros/if_nested.x.cf
@@ -0,0 +1,45 @@
+######################################################
+#
+#  Test that nested @if fails
+#
+#####################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+bundle common test
+{
+@if version_after(3.7)
+@if version_after(3.6)
+  classes:
+      "expected" expression => "any";
+@endif
+@endif
+
+@if version_after(3.6)
+  classes:
+      "expected2" expression => "any";
+@endif
+
+@if version_after(300.700)
+  classes:
+      "not_expected" expression => "any";
+@endif
+}
+
+bundle agent check
+{
+  methods:
+      "" usebundle => dcs_passif_expected("expected,expected2",
+                                         "not_expected",
+                                         $(this.promise_filename));
+}
+
+@if version_after(300.600)
+
+This text should never be seen, it's completely ignored
+@endif
