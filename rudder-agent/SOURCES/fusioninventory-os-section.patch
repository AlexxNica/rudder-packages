diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/AIX.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/AIX.pm
index 5076db8..60930b0 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/AIX.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/AIX.pm
@@ -32,6 +32,12 @@ sub doInventory {
         OSCOMMENTS => $OSComment,
         OSVERSION => $OSLevel,
     });
+
+    $inventory->setOperatingSystem({
+        NAME                 => "AIX",
+        VERSION              => $OSVersion,
+        FULL_NAME            => "$OSName $OSVersion"
+    });
 }
 
 1;
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/BSD.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/BSD.pm
index 69da892..e18f6b1 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/BSD.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/BSD.pm
@@ -19,10 +19,12 @@ sub doInventory {
     my $OSVersion;
     my $OSLevel;
     my $OSArchi;
+    my $OSName;
 
     # Operating system informations
     chomp($OSVersion=`uname -r`);
     chomp($OSArchi=`uname -p`);
+    chomp($OSName=`uname -s`);
 
     # Retrieve the origin of the kernel configuration file
     my ($date, $origin, $kernconf);
@@ -48,5 +50,12 @@ sub doInventory {
         OSCOMMENTS => $OSComment,
         OSVERSION => $OSVersion,
     });
+
+    $inventory->setOperatingSystem({
+        NAME                 => $OSName,
+        VERSION              => $OSVersion,
+        KERNEL_VERSION       => $OSVersion,
+        FULL_NAME            => $OSNAME
+    });
 }
 1;
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/Generic.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/Generic.pm
index 02fd246..e0e5458 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/Generic.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/Generic.pm
@@ -3,6 +3,16 @@ package FusionInventory::Agent::Task::Inventory::OS::Generic;
 use strict;
 use warnings;
 
-sub doInventory {}
+use English qw(-no_match_vars);
+
+sub doInventory {
+    my $params = shift;
+    my $inventory = $params->{inventory};
+
+    $inventory->setOperatingSystem({
+        KERNEL_NAME    => $OSNAME
+    });
+
+}
 
 1;
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/HPUX.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/HPUX.pm
index f102533..e50be86 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/HPUX.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/HPUX.pm
@@ -49,6 +49,12 @@ sub doInventory {
         DATELASTLOGGEDUSER => $LastLogDate
     });
 
+    $inventory->setOperatingSystem({
+        NAME                 => "HP-UX",
+        VERSION              => $OSRelease,
+        KERNEL_VERSION       => $OSRelease,
+        FULL_NAME            => $OSName
+    });
 }
 
 1;
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/Linux.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux.pm
index 3f28dcb..0a7ab23 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/Linux.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux.pm
@@ -47,6 +47,10 @@ sub doInventory {
         LASTLOGGEDUSER => $lastloggeduser,
         DATELASTLOGGEDUSER => $datelastlog
     });
+
+    $inventory->setOperatingSystem({
+        KERNEL_VERSION       => $osversion
+    });
 }
 
 1;
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/LSB.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/LSB.pm
index 12b0560..00df1b4 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/LSB.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/LSB.pm
@@ -15,6 +15,15 @@ sub doInventory {
     foreach (`lsb_release -d`) {
         $release = $1 if /Description:\s+(.+)/;
     }
+
+    my $linuxDistributionName;
+    my $linuxDistributionVersion;
+    # Redirect stderr to /dev/null to avoid "No LSB modules are available" message
+    foreach (`lsb_release -a 2> /dev/null`) {
+        $linuxDistributionName    = $1 if /Distributor ID:\s+(.+)/;
+        $linuxDistributionVersion = $1 if /Release:\s+(.+)/;
+    }
+
     my $OSComment;
     chomp($OSComment =`uname -v`);
 
@@ -22,6 +31,13 @@ sub doInventory {
         OSNAME => $release,
         OSCOMMENTS => "$OSComment"
     });
+
+    $inventory->setOperatingSystem({
+        NAME                 => "$linuxDistributionName",
+        VERSION              => "$linuxDistributionVersion",
+        FULL_NAME            => $release
+    });
+
 }
 
 
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/NonLSB.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/NonLSB.pm
index cce2b60..dfc9538 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/NonLSB.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/NonLSB.pm
@@ -5,6 +5,8 @@ use warnings;
 
 use English qw(-no_match_vars);
 
+# This hash contains the following fields:
+#     File to read             => Full version string
 my @files = (
     [ '/etc/vmware-release'    => '%s' ],
     [ '/etc/arch-release'      => 'ArchLinux %s' ],
@@ -22,6 +24,59 @@ my @files = (
     [ '/etc/issue'             => '%s' ],
 );
 
+# Note: the following hash, as well as the setDistroData method below, were
+# added after the files hash above, and the getRelease function below.
+# As a result, there is a lot of duplication between the two. This is
+# deliberate, to avoid messing with existing code that works on a stable branch.
+# In the 2.2.x branch, or later, the first pair should be removed.
+# See: http://forge.fusioninventory.org/issues/1066
+
+# This hash contains the following fields:
+#     File to read             => Distro name => Regex to get distro version => Full version
+my @filesDistros = (
+    # vmware-release contains something like "VMware ESX Server 3" or "VMware ESX 4.0 (Kandinsky)"
+    [ '/etc/vmware-release'    => 'VMWare'    => '.* ([0-9\.]+).*'          => '%s' ],
+
+    [ '/etc/arch-release'      => 'ArchLinux' => '(.*)'                     => 'ArchLinux %s' ],
+
+    [ '/etc/debian_version'    => 'Debian'    => '(.*)'                     => 'Debian GNU/Linux %s'],
+
+    # fedora-release contains something like "Fedora release 9 (Sulphur)"
+    [ '/etc/fedora-release'    => 'Fedora'    => '.* release ([0-9\.]+).*'  => '%s' ],
+
+    [ '/etc/gentoo-release'    => 'Gentoo'    => '(.*)'                     => 'Gentoo Linux %s' ],
+
+    # knoppix_version contains something like "3.2 2003-04-15".
+    # Note: several 3.2 releases can be made, with different dates, so we need to keep the date suffix
+    [ '/etc/knoppix_version'   => 'Knoppix'   => '(.*)'                     => 'Knoppix GNU/Linux %s' ],
+
+    # mandriva-release contains something like "Mandriva Linux release 2010.1 (Official) for x86_64"
+    [ '/etc/mandriva-release'  => 'Mandriva'  => '.* release ([0-9\.]+).*'  => '%s'],
+
+    # mandrake-release contains something like "Mandrakelinux release 10.1 (Community) for i586"
+    [ '/etc/mandrake-release'  => 'Mandrake'  => '.* release ([0-9\.]+).*'  => '%s'],
+
+    # redhat-release contains something like "Red Hat Enterprise Linux Server release 5 (Tikanga)"
+    [ '/etc/redhat-release'    => 'RedHat'    => '.* release ([0-9\.]+).*'  => '%s' ],
+
+    [ '/etc/slackware-version' => 'Slackware' => 'Slackware (.*)'           => '%s' ],
+
+    # SuSE-release contains something like "SUSE Linux Enterprise Server 11 (x86_64)"
+    # Note: it may contain several extra lines
+    [ '/etc/SuSE-release'      => 'SuSE'      => '.* ([0-9\.]+).*'          => '%s' ],
+
+    # trustix-release contains something like "Trustix Secure Linux release 2.0 (Cloud)"
+    [ '/etc/trustix-release'   => 'Trustix'   => '.* release ([0-9\.]+).*'  => '%s' ],
+
+    # Fallback
+    [ '/etc/issue'             => 'Unknown Linux distribution' => '.* ([0-9\.]+).*' => '%s' ],
+
+    # Note: Ubuntu is not listed here as it does not have a
+    # ubuntu-{release,version} file, but it should always have the lsb_release
+    # command so it will be handled by the Linux::Distro::LSB module
+);
+
+
 our $runMeIfTheseChecksFailed = ["FusionInventory::Agent::Task::Inventory::OS::Linux::Distro::LSB"];
 
 sub isInventoryEnabled {
@@ -51,6 +106,46 @@ sub findRelease {
     return $release;
 }
 
+sub setDistroData {
+    my $inventory = shift;
+
+    my $distroName;
+    my $distroVersion;
+	my $commercialFullName;
+
+    foreach (@filesDistros) {
+        my $file = $_->[0];
+        $distroName = $_->[1];
+        my $distroVersRegex = $_->[2];
+        my $distroFullName  = $_->[3];
+
+        next unless -f $file;
+        my $handle;
+        if (!open $handle, '<', $file) {
+            warn "Can't open $file: $ERRNO";
+            return;
+        }
+        my $version = <$handle>;
+        chomp $version;
+        close $handle;
+
+        $commercialFullName = sprintf $distroFullName, $version;
+        if ($version =~ /^$distroVersRegex/) {
+            $distroVersion = $1;
+
+            # Now we have found the distro name and version, let's set them
+            $inventory->setOperatingSystem({
+                NAME                 => "$distroName",
+                VERSION              => "$distroVersion",
+                FULL_NAME            => $commercialFullName
+            });
+
+            # We found what we need, no need to continue checking
+            last;
+        }
+    }
+}
+
 sub doInventory {
     my $params = shift;
     my $inventory = $params->{inventory};
@@ -58,10 +153,15 @@ sub doInventory {
     my $OSComment = `uname -v`;
     chomp $OSComment;
 
+    my $OSFullName = findRelease();
+
     $inventory->setHardware({ 
-        OSNAME     => findRelease(),
+        OSNAME     => $OSFullName,
         OSCOMMENTS => $OSComment
     });
+
+    setDistroData($inventory);
+
 }
 
 1;
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/SuSE.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/SuSE.pm
new file mode 100644
index 0000000..371cc6b
--- /dev/null
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/Linux/Distro/SuSE.pm
@@ -0,0 +1,34 @@
+package FusionInventory::Agent::Task::Inventory::OS::Linux::Distro::SuSE;
+
+use strict;
+use warnings;
+
+use English qw(-no_match_vars);
+
+# This module is used to detect SuSE's service pack level
+
+sub isInventoryEnabled {
+    return -f "/etc/SuSE-release";
+}
+
+sub doInventory {
+    my $params = shift;
+    my $inventory = $params->{inventory};
+
+    my $handle;
+    if (!open $handle, '<', "/etc/SuSE-release") {
+        warn "Can't open /etc/SuSE-release: $ERRNO";
+        return;
+    }
+    while (<$handle>) {
+        if (/^PATCHLEVEL = ([0-9]+)/) {
+			$inventory->setOperatingSystem({
+                SERVICE_PACK => $1
+            });
+        }
+    }
+    close $handle;
+
+}
+
+1;
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/MacOS.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/MacOS.pm
index b13d9d5..8fd181e 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/MacOS.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/MacOS.pm
@@ -13,6 +13,7 @@ sub doInventory {
     my $params = shift;
     my $inventory = $params->{inventory};
 
+    my $KernelVersion;
     my $OSName;
     my $OSComment;
     my $OSVersion;
@@ -42,6 +43,8 @@ sub doInventory {
         chomp($OSVersion=`uname -r`);			
     }
 
+    chomp($KernelVersion=`uname -r`);
+
     # add the uname -v as the comment, not really needed, but extra info never hurt
     chomp($OSComment=`uname -v`);
     $inventory->setHardware({
@@ -49,6 +52,13 @@ sub doInventory {
         OSCOMMENTS => $OSComment,
         OSVERSION  => $OSVersion,
     });
+
+    $inventory->setOperatingSystem({
+        NAME                 => "MacOSX",
+        VERSION              => $OSVersion,
+        KERNEL_VERSION       => $KernelVersion,
+        FULL_NAME            => $OSName
+    });
 }
 
 
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/Solaris.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/Solaris.pm
index f1f82bd..d0c05dc 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/Solaris.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/Solaris.pm
@@ -54,6 +54,13 @@ sub doInventory {
         OSVERSION => $OSVersion,
         DESCRIPTION => $HWDescription
     });
+
+    $inventory->setHardware({
+        NAME                 => "Solaris",
+        VERSION              => $OSLevel,
+        KERNEL_VERSION       => $OSComment,
+        FULL_NAME            => "$OSName $OSLevel"
+    });
 }
 
 
diff --git a/lib/FusionInventory/Agent/Task/Inventory/OS/Win32/OS.pm b/lib/FusionInventory/Agent/Task/Inventory/OS/Win32/OS.pm
index 2626f7a..18d7d91 100644
--- a/lib/FusionInventory/Agent/Task/Inventory/OS/Win32/OS.pm
+++ b/lib/FusionInventory/Agent/Task/Inventory/OS/Win32/OS.pm
@@ -121,6 +121,14 @@ sub doInventory {
             SWAP => int(($Properties->{TotalSwapSpaceSize}||0)/(1024*1024)),
             DESCRIPTION => $description,
         });
+
+        $inventory->setOperatingSystem({
+            NAME                 => "Windows",
+#            VERSION              => $OSVersion,
+            KERNEL_VERSION       => $Properties->{Version},
+            FULL_NAME            => $Properties->{Caption},
+            SERVICE_PACK         => $Properties->{CSDVersion}
+        });
     }
 
     foreach my $Properties (getWmiProperties('Win32_ComputerSystem', qw/
diff --git a/lib/FusionInventory/Agent/XML/Query/Inventory.pm b/lib/FusionInventory/Agent/XML/Query/Inventory.pm
index b87e778..0224682 100644
--- a/lib/FusionInventory/Agent/XML/Query/Inventory.pm
+++ b/lib/FusionInventory/Agent/XML/Query/Inventory.pm
@@ -631,6 +631,32 @@ sub setHardware {
     }
 }
 
+=item setOperatingSystem()
+
+Save global information regarding the operating system.
+
+=cut
+sub setOperatingSystem {
+    my ($self, $args) = @_;
+
+    my $logger = $self->{logger};
+
+    foreach my $key (qw/
+                        KERNEL_NAME
+                        KERNEL_VERSION
+                        NAME
+                        VERSION
+                        FULL_NAME
+                        SERVICE_PACK
+                     /) {
+
+        next unless exists $args->{$key};
+
+        my $string = $self->_encode({ string => $args->{$key} });
+        $self->{h}{'CONTENT'}{'OPERATINGSYSTEM'}{$key}[0] = $string;
+    }
+}
+
 =item setBios()
 
 Set BIOS informations.
@@ -1685,6 +1711,10 @@ should use the USERS section instead.
 
 =item OSVERSION
 
+Version number of the operating system. This field will be deprecated in the
+future, please use OPERATINGSYSTEM/VERSION or OPERATINGSYSTEM/KERNEL_VERSION
+instead.
+
 =item PROCESSORN
 
 =item OSCOMMENTS
@@ -1717,6 +1747,10 @@ The time needed to run the inventory on the agent side.
 
 =item OSNAME
 
+Full name of the operating system as reported by itself. This field will be
+deprecated in the future, please use OPERATINGSYSTEM/NAME or
+OPERATINGSYSTEM/FULL_NAME instead.
+
 =item IPADDR
 
 =item WORKGROUP
@@ -1747,9 +1781,9 @@ This field is deprecated, you should use the USERS section instead.
 
 =item VMSYSTEM
 
-The virtualization technologie used if the machine is a virtual machine.
+The virtualization technology used if the machine is a virtual machine.
 
-Can by:
+Can be:
 
 =over 5
 
@@ -1793,6 +1827,43 @@ Can by:
 
 The computer chassis format (e.g: Notebook, Laptop, Server, etc)
 
+=head2 OPERATINGSYSTEM
+
+=over 4
+
+=item KERNEL_NAME
+
+The name of the kernel used by this operating system, e.g freebsd, linux, hpux,
+win32, etc (linux for android).
+
+=item KERNEL_VERSION
+
+Version of the operating system's kernel, e.g 2.6.32 for Linux, 5.2.x.y on
+Windows Server 2003, etc.
+
+=item NAME
+
+Name of the Operating System ("Distributor ID" in LSB terms), e.g Debian,
+Ubuntu, CentOS, SUSE LINUX, Windows, MacOSX, FreeBSD, AIX, Android, etc.
+
+=item VERSION
+
+Version of the operating system distribution ("Release" in LSB terms), e.g 11.04
+on Ubuntu natty, 5.0.8 on Debian Lenny, 5.4 on CentOS 5.4, 2003 for Windows
+Server 2003, etc.
+
+=item FULL_NAME
+
+Full name of the operating system as reported by itself, e.g "Debian GNU/Linux
+unstable (sid)" or "Microsoft(R) Windows(R) Server 2003, Enterprise Edition
+x64". This is also contained in the HARDWARE/OSNAME field which will be
+deprecated in the future.
+
+=item SERVICE_PACK
+
+The Service Pack level reported by the operating system. This field is only
+present on systems which use this notion.
+
 =back
 
 =head2 MONITORS
