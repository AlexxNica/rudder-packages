#!/bin/sh
# postinst script for rudder-inventory-ldap
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Variables
VAR_RUDDER="/var/rudder"
PT_DIR="${VAR_RUDDER}/configuration-repository/policy-templates"

case "$1" in
    configure)
		echo "Reloading syslog"
		invoke-rc.d rsyslog reload
  /etc/init.d/apache2 stop
  a2dissite default
  a2enmod dav_fs
  a2enmod rewrite
  a2enmod proxy_http
  # Add right to apache user to access /var/rudder/inventories/incoming
  chmod 751 /var/rudder/inventories
  chown root:www-data /var/rudder/inventories/incoming
  chmod 2770 /var/rudder/inventories/incoming
  chown root:www-data /var/rudder/inventories/accepted-nodes-updates
  chmod 2770 /var/rudder/inventories/accepted-nodes-updates
  chmod 755 -R /opt/rudder/share/tools
  a2ensite rudder-default
  htpasswd -bc /opt/rudder/etc/htpasswd-webdav-initial rudder rudder
  htpasswd -bc /opt/rudder/etc/htpasswd-webdav rudder rudder

  echo "(Re-)starting Apache HTTPd"
  /etc/init.d/apache2 restart

  # Run any upgrades
  # Note this must happen *before* creating the technique store, as it was moved in version 2.3.2
  # and creating it manually would break the upgrade logic
  /opt/rudder/bin/rudder-upgrade

	# Create and populate technique store
	if [ ! -d /var/rudder/configuration-repository ]; then mkdir -p /var/rudder/configuration-repository; fi
	if [ ! -d /var/rudder/configuration-repository/shared-files ]; then mkdir -p /var/rudder/configuration-repository/shared-files; fi
	if [ ! -d /var/rudder/configuration-repository/techniques ]; then
		cp -a /opt/rudder/share/techniques /var/rudder/configuration-repository/
	fi

	# Migration of PT 'Set the permissions of files' (Ensure that all actions below won't happen if migration has already made)
	if [ ! -f ${PT_DIR}/fileConfiguration/fileSecurity/filesPermissions/1.0/policy.xml ]; then
	## Create right folder if it doesn't exist
		if [ ! -d ${PT_DIR}/fileConfiguration/fileSecurity/ ]; then
			mkdir -p "${PT_DIR}/fileConfiguration/fileSecurity"
			echo "${PT_DIR}/fileConfiguration/fileSecurity has been created"
		else
			echo "${PT_DIR}/fileConfiguration/fileSecurity already exists"
		fi

		if [ -d ${PT_DIR}/fileConfiguration/security/ ]; then
	## Check that filePermissions.st located in fileConfiguration/security/ is not duplicated and in the right folder
			if [ -d ${PT_DIR}/fileConfiguration/security/filesPermissions/ ]; then
				echo "The Policy Template 'Set the permissions of files' is not correctly located"
				cd /var/rudder/configuration-repository/ && git mv policy-templates/fileConfiguration/security/filesPermissions/ policy-templates/fileConfiguration/fileSecurity/
				cd /var/rudder/configuration-repository/ && git commit -m "Correct Policy Template 'Set the permissions of files' location" policy-templates/fileConfiguration/security/filesPermissions/
				echo "The location of the Policy Template 'Set the permissions of files' is now correct"
			fi
	## Check that a category exist on fileSecurity folder, if not move from security folder
			if [ ! -f ${PT_DIR}/fileConfiguration/fileSecurity/category.xml ]; then
				echo "${PT_DIR}/fileConfiguration/fileSecurity/category.xml is missing"
				if [ -f ${PT_DIR}/fileConfiguration/security/category.xml ]; then
					cd /var/rudder/configuration-repository/ && git mv policy-templates/fileConfiguration/security/category.xml policy-templates/fileConfiguration/fileSecurity/ && git commit -m "Move category description from fileConfiguration/security/ to fileConfiguration/fileSecurity/"
					echo "${PT_DIR}/fileConfiguration/security/category.xml has been moved to ${PT_DIR}/fileConfiguration/fileSecurity/category.xml"
				else
					echo "can't find ${PT_DIR}/fileConfiguration/security/category.xml"
					exit 1
				fi
			fi
	## Check that no others directories are located in fileConfiguration/security/
			NBR_DIR=`find ${PT_DIR}/fileConfiguration/security/ -mindepth 1 -maxdepth 1 -type d | wc -l`
			if [ ${NBR_DIR} -ne 0 ]; then
				echo "Some folder remains in the folder /var/rudder/configuration-repository/policy-templates/fileConfiguration/security/"
				cd /var/rudder/configuration-repository/ && find policy-templates/fileConfiguration/security/ -mindepth 1 -maxdepth 1 -type d | xargs -I SRCFOLDER git mv SRCFOLDER policy-templates/fileConfiguration/fileSecurity/
				cd /var/rudder/configuration-repository/ && git commit -m "Move all remnant folder from fileConfiguration/security/ to fileConfiguration/fileSecurity/" policy-templates/fileConfiguration/fileSecurity/
				echo "All the folder from ${PT_DIR}/fileConfiguration/security/ are now moved to ${PT_DIR}/fileConfiguration/fileSecurity/"
			fi
	## Remove the folder which should contain no more files or folder
		rm -rf policy-templates/fileConfiguration/security/ # Not using git since it can't manage folder without file
		echo  "${PT_DIR}/fileConfiguration/security/ has been removed"
		fi
	fi

	# Check that Rudder database is able to handle backslash
	CHECK_BACKSLASH=$(su - postgres -c "psql -t -d rudder -c \"select '\\foo';\"" 2> /dev/null | grep "foo" | wc -l)
	if [ ${CHECK_BACKSLASH} -ne 1 ]; then
		echo "Rudder database is not backslash compliant, then a modification will be made."
		su - postgres -c "psql -t -d rudder -c \"alter database rudder set standard_conforming_strings=true;\""
		echo "Done. PostgreSQL and Rudder will be restarted"
		/etc/init.d/postgresql restart
	fi

  # Restart the webapp
  echo "Restarting Rudder webapp and inventory-endpoint"
  /etc/init.d/jetty restart

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
